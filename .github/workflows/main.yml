name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # allow manual runs
  workflow_dispatch:
env:
  PNPM_VERSION: 6.16.1
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    strategy:
      matrix:
        node: [12]
        package: ["rollup-plugin", "transform", "esbuild-plugin"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - name: install pnpm
        run: npm install -g pnpm@$PNPM_VERSION
      - name: Month and Year (for cache busting)
        id: month-and-year
        shell: bash
        run: |
          echo "::set-output name=date::$(/bin/date -u \"+%Y%m\")"
      - uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ matrix.node }}-${{ github.workflow }}-${{ steps.month-and-year.outputs.date }}-${{ hashFiles('./pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node }}-${{ github.workflow }}-${{ steps.month-and-year.outputs.date }}-
      - name: install deps
        run: pnpm install --frozen-lockfile --filter {./packages/${{ matrix.package }}}...
      - name: build
        run: pnpm run build --filter {./packages/${{ matrix.package }}}...
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    strategy:
      max-parallel: 4
      matrix:
        package: ["rollup-plugin", "transform", "esbuild-plugin"]
        command: ["test:ci"]
        node: [ 12, 14, 16 ]
        include:
          - package: "rollup-plugin"
            command: lint
            node: 16
          - package: "transform"
            command: lint
            node: 16          
          - package: "rollup-plugin"
            command: "format:check"
            node: 16
          - package: "transform"
            command: "format:check"
            node: 16
          - package: "rollup-plugin"
            command: "depcheck"
            node: 16
          - package: "transform"
            command: "depcheck"
            node: 16
          - package: "rollup-plugin"
            command: "type-check"
            node: 16
          - package: "transform"
            command: "type-check"
            node: 16
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - name: install pnpm
        run: npm install -g pnpm@$PNPM_VERSION
      - name: Month and Year (for cache busting)
        id: month-and-year
        shell: bash
        run: |
          echo "::set-output name=date::$(/bin/date -u \"+%Y%m\")"
      - uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-10-${{ github.workflow }}-${{ steps.month-and-year.outputs.date }}-${{ hashFiles('./pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-10-${{ github.workflow }}-${{ steps.month-and-year.outputs.date }}-
      - name: install deps
        run: pnpm install --frozen-lockfile --filter {./packages/${{ matrix.package }}}...
      - name: build deps
        run: pnpm run build --filter {./packages/${{ matrix.package }}}^...
      - name: ${{ matrix.command }}
        run: pnpm run ${{ matrix.command }} --filter {./packages/${{ matrix.package }}}
      - name: coverage
        uses: codecov/codecov-action@v2
        if: matrix.command == 'test:ci' && matrix.node == '16'
        with:
          flags: ${{ matrix.package }}
          files: ./packages/${{ matrix.package }}/coverage/coverage-final.json
  release:
    if: github.ref == 'refs/heads/main'
    needs: ["test", "build"]
    name: Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: 12
      - name: install pnpm
        run: npm install -g pnpm@$PNPM_VERSION
      - name: install deps
        run: pnpm install --frozen-lockfile
      - name: build
        run: pnpm run -r build
      - name: write .npmrc
        run: printf "//registry.npmjs.org/:_authToken=%s" "$NPM_TOKEN" > ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      # release order matters for resolving proper versions
      # it's also important these all happen in the same runner since pnpm will modify versions within the tree,
      # but those changes will not neccessarily be committed
      #
      # (WARNING: semantic-release is likely to have issues with the multiple packages; consider using changesets
      # or something else to manage versioning/releases.)
      - name: Release transform
        run: |
          cd packages/transform
          pnpm --package=semantic-release@17.3 --package=semantic-release-monorepo@7.0 --package=@semantic-release/exec@5.0 dlx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Release rollup-plugin
        run: |
          cd packages/rollup-plugin
          pnpm --package=semantic-release@17.3 --package=semantic-release-monorepo@7.0 --package=@semantic-release/exec@5.0 dlx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Release esbuild-plugin
        run: |
          cd packages/esbuild-plugin
          pnpm --package=semantic-release@17.3 --package=semantic-release-monorepo@7.0 --package=@semantic-release/exec@5.0 dlx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
